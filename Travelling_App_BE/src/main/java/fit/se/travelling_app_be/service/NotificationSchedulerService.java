package fit.se.travelling_app_be.service;

import fit.se.travelling_app_be.entity.Booking;
import fit.se.travelling_app_be.repository.BookingRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class NotificationSchedulerService {
    
    private final BookingRepository bookingRepository;
    private final NotificationService notificationService;
    
    // Ch·∫°y m·ªói gi·ªù ƒë·ªÉ ki·ªÉm tra tour s·∫Øp kh·ªüi h√†nh
    @Scheduled(fixedRate = 3600000) // 1 hour = 3600000 ms
    public void checkUpcomingTours() {
        log.info("üîî Checking for upcoming tours...");
        
        try {
            // L·∫•y t·∫•t c·∫£ bookings c√≥ status CONFIRMED ho·∫∑c PENDING
            List<Booking> allBookings = bookingRepository.findAll();
            
            LocalDate today = LocalDate.now();
            LocalDate tomorrow = today.plusDays(1);
            LocalDate threeDaysLater = today.plusDays(3);
            
            for (Booking booking : allBookings) {
                // Ch·ªâ x·ª≠ l√Ω tour ƒë√£ x√°c nh·∫≠n v√† ch∆∞a ho√†n th√†nh
                if (!"CONFIRMED".equals(booking.getStatus()) && !"PENDING".equals(booking.getStatus())) {
                    continue;
                }
                
                try {
                    // Get travel date as LocalDate
                    if (booking.getTravelDate() == null) {
                        continue;
                    }
                    
                    LocalDate travelDate = booking.getTravelDate().toLocalDate();
                    
                    // T√≠nh s·ªë ng√†y c√≤n l·∫°i
                    long daysUntilTravel = ChronoUnit.DAYS.between(today, travelDate);
                    
                    // Ki·ªÉm tra xem ƒë√£ g·ª≠i notification ch∆∞a
                    boolean alreadyNotified = hasRecentNotification(
                        booking.getUserId(), 
                        booking.getId(), 
                        daysUntilTravel
                    );
                    
                    if (alreadyNotified) {
                        continue;
                    }
                    
                    String destinationName = "ƒëi·ªÉm ƒë·∫øn c·ªßa b·∫°n";
                    if (booking.getDestination() != null && booking.getDestination().getName() != null) {
                        destinationName = booking.getDestination().getName();
                    }
                    
                    // G·ª≠i th√¥ng b√°o d·ª±a tr√™n s·ªë ng√†y c√≤n l·∫°i
                    if (daysUntilTravel == 1) {
                        // Tour kh·ªüi h√†nh v√†o ng√†y mai
                        notificationService.createNotification(
                            booking.getUserId(),
                            "Tour s·∫Øp kh·ªüi h√†nh! üéí",
                            "Tour ƒë·∫øn " + destinationName + " c·ªßa b·∫°n s·∫Ω kh·ªüi h√†nh v√†o ng√†y mai. H√£y chu·∫©n b·ªã s·∫µn s√†ng!",
                            "booking",
                            booking.getId(),
                            "upcoming-1d"
                        );
                        log.info("‚úÖ Sent 1-day reminder for booking: {}", booking.getId());
                        
                    } else if (daysUntilTravel == 3) {
                        // Tour kh·ªüi h√†nh sau 3 ng√†y
                        DateTimeFormatter displayFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                        String travelDateStr = travelDate.format(displayFormatter);
                        
                        notificationService.createNotification(
                            booking.getUserId(),
                            "Nh·∫Øc nh·ªü: Tour s·∫Øp kh·ªüi h√†nh üìÖ",
                            "Tour ƒë·∫øn " + destinationName + " c·ªßa b·∫°n s·∫Ω kh·ªüi h√†nh trong 3 ng√†y n·ªØa (ng√†y " + travelDateStr + ").",
                            "booking",
                            booking.getId(),
                            "upcoming-3d"
                        );
                        log.info("‚úÖ Sent 3-day reminder for booking: {}", booking.getId());
                        
                    } else if (daysUntilTravel == 0) {
                        // Tour kh·ªüi h√†nh h√¥m nay
                        notificationService.createNotification(
                            booking.getUserId(),
                            "Tour kh·ªüi h√†nh h√¥m nay! üöÄ",
                            "Chuy·∫øn ƒëi ƒë·∫øn " + destinationName + " c·ªßa b·∫°n kh·ªüi h√†nh h√¥m nay. Ch√∫c b·∫°n c√≥ m·ªôt chuy·∫øn ƒëi vui v·∫ª!",
                            "booking",
                            booking.getId(),
                            "upcoming-0d"
                        );
                        log.info("‚úÖ Sent same-day reminder for booking: {}", booking.getId());
                        
                    } else if (daysUntilTravel == 7) {
                        // Tour kh·ªüi h√†nh sau 1 tu·∫ßn
                        notificationService.createNotification(
                            booking.getUserId(),
                            "Tour s·∫Øp ƒë·∫øn! üóìÔ∏è",
                            "Tour ƒë·∫øn " + destinationName + " c·ªßa b·∫°n s·∫Ω kh·ªüi h√†nh trong 1 tu·∫ßn n·ªØa. ƒê·ª´ng qu√™n chu·∫©n b·ªã h√†nh l√Ω nh√©!",
                            "booking",
                            booking.getId(),
                            "upcoming-7d"
                        );
                        log.info("‚úÖ Sent 7-day reminder for booking: {}", booking.getId());
                    }
                    
                } catch (Exception e) {
                    log.error("‚ùå Error processing booking {}: {}", booking.getId(), e.getMessage());
                }
            }
            
            log.info("‚úÖ Finished checking upcoming tours");
            
        } catch (Exception e) {
            log.error("‚ùå Error in checkUpcomingTours: {}", e.getMessage());
        }
    }
    
    // Ki·ªÉm tra xem ƒë√£ g·ª≠i notification cho booking n√†y v·ªõi reminderType c·ª• th·ªÉ ch∆∞a
    private boolean hasRecentNotification(String userId, String bookingId, long daysUntil) {
        try {
            List<fit.se.travelling_app_be.model.Notification> notifications = 
                notificationService.getUserNotifications(userId);
            
            // X√°c ƒë·ªãnh reminderType c·∫ßn check
            String targetReminderType;
            if (daysUntil == 0) {
                targetReminderType = "upcoming-0d";
            } else if (daysUntil == 1) {
                targetReminderType = "upcoming-1d";
            } else if (daysUntil == 3) {
                targetReminderType = "upcoming-3d";
            } else if (daysUntil == 7) {
                targetReminderType = "upcoming-7d";
            } else {
                return false; // Kh√¥ng ph·∫£i c√°c ng√†y c·∫ßn reminder
            }
            
            // Ki·ªÉm tra xem ƒë√£ c√≥ notification v·ªõi c√πng bookingId v√† reminderType ch∆∞a
            for (fit.se.travelling_app_be.model.Notification notification : notifications) {
                if (bookingId.equals(notification.getRelatedId()) &&
                    targetReminderType.equals(notification.getReminderType())) {
                    
                    log.info("‚è≠Ô∏è Skip: Already sent {} notification for booking {}", targetReminderType, bookingId);
                    return true;
                }
            }
            
            return false;
            
        } catch (Exception e) {
            log.error("‚ùå Error checking recent notifications: {}", e.getMessage());
            return false; // N·∫øu c√≥ l·ªói, cho ph√©p g·ª≠i (better to send than skip)
        }
    }
    
    // Method ƒë·ªÉ test th·ªß c√¥ng (c√≥ th·ªÉ g·ªçi qua API)
    public void checkUpcomingToursManually() {
        log.info("üîß Manual check triggered");
        checkUpcomingTours();
    }
}

